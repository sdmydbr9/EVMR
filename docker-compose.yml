# EVMR System Docker Compose Configuration

services:
  # EVMR application service
  evmr-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: evmr-application
    restart: unless-stopped
    ports:
      - "3786:3786" # Map container port to host port
    depends_on:
      - evmr-db # Ensure database is started before the application
    environment:
      # Application configuration
      - NODE_ENV=${NODE_ENV}
      - PORT=${PORT}
      - APP_NAME=${APP_NAME}
      # Database connection
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${DB_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      # Authentication
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      - REFRESH_TOKEN_EXPIRATION=${REFRESH_TOKEN_EXPIRATION}
      # Multi-location configuration
      - MULTI_LOCATION_ENABLED=${MULTI_LOCATION_ENABLED}
      # Set timezone to Indian Standard Time
      - TZ=Asia/Kolkata
      # Database specific environment variables
      - DB_HOST=${POSTGRES_HOST}
      - DB_PORT=${POSTGRES_PORT}
      - DB_NAME=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      # Email settings
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - EMAIL_FROM=${EMAIL_FROM}
      # Logging
      - LOG_LEVEL=${LOG_LEVEL}
      - LOG_FORMAT=${LOG_FORMAT}
      # File upload settings
      - MAX_FILE_SIZE=${MAX_FILE_SIZE}
      - ALLOWED_FILE_TYPES=${ALLOWED_FILE_TYPES}
    env_file:
      - .env # Load additional environment variables from .env file
    volumes:
      # Mount for persistent storage of uploaded files (lab results, x-rays, etc.)
      - evmr-uploads:/app/backend/uploads
      # Mount for logs
      - evmr-logs:/app/backend/logs
    networks:
      - evmr-network
    # Healthcheck for application
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3786/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Admin service for user registration approvals
  evmr-admin:
    build:
      context: ./admin-service
      dockerfile: Dockerfile
    container_name: evmr-admin-service
    restart: unless-stopped
    ports:
      - "3789:3789" # Map container port to host port
    depends_on:
      - evmr-db # Ensure database is started before the admin service
    environment:
      # Application configuration
      - NODE_ENV=${NODE_ENV}
      - PORT=3789
      # Database connection (same as main app)
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${DB_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      # Authentication
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      - REFRESH_TOKEN_EXPIRATION=${REFRESH_TOKEN_EXPIRATION}
      # Set timezone to Indian Standard Time
      - TZ=Asia/Kolkata
      # Database specific environment variables
      - DB_HOST=${POSTGRES_HOST}
      - DB_PORT=${POSTGRES_PORT}
      - DB_NAME=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      # Admin user
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
    env_file:
      - .env # Load additional environment variables from .env file
    volumes:
      # Mount for logs
      - evmr-admin-logs:/app/admin-service/logs
    networks:
      - evmr-network
    # Healthcheck for admin service
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3789/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  # PostgreSQL database service
  evmr-db:
    image: postgres:14-alpine
    container_name: evmr-database
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      # Set timezone to Indian Standard Time
      - TZ=Asia/Kolkata
    volumes:
      # Persistent volume for database data
      - evmr-db-data:/var/lib/postgresql/data
      # Mount init scripts for database setup
      - ./backend/config/database/init:/docker-entrypoint-initdb.d
    ports:
      - "5431:5432" # Expose PostgreSQL port (can be removed for production)
    networks:
      - evmr-network
    # Healthcheck for database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

# Named volumes for persistent data
volumes:
  evmr-db-data:
    # Stores all PostgreSQL data for:
    # - Patient records
    # - Medical history
    # - Appointment data
    # - Inventory records
    # - User accounts and access control
  evmr-uploads:
    # Stores uploaded files:
    # - Lab results
    # - X-rays and imaging
    # - Documents
    # - Vaccination certificates
  evmr-logs:
    # Stores application logs
  evmr-admin-logs:
    # Stores admin service logs

# Custom network for EVMR services
networks:
  evmr-network:
    driver: bridge

# This docker-compose configuration:
# 1. Sets up the EVMR application container with its environment variables
# 2. Sets up the EVMR admin service for user approval management
# 3. Configures the PostgreSQL database with persistent storage
# 4. Creates a dedicated network for secure communication between services
# 5. Establishes volumes for data persistence across container restarts
# 6. Implements healthchecks to ensure services are running correctly 
